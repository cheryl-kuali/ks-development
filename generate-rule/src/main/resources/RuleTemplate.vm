## A generic rule template

rule "${ruleName}_INIT"
    ## Set salience to max Integer value (java.lang.Integer.MAX)
    salience 2147483647	
    no-loop true
    lock-on-active true
    when 
    	##prop: PropositionContainer(size == 0) 
        prop: PropositionContainer() 
    	req: CourseEnrollmentRequest() 
    then
    	
    	#set ($count = 0)
    
    	#foreach( $key in $propositionMap.keySet() ) 
   		#set ( $proposition = $propositionMap.get($key) )
   		#set ( $rhs = $proposition.RightHandSide.ExpectedValue )
##TODO: This should be changed to directly call the comparison operator inside the rule proposition    		   		
   		#set ( $operator = $proposition.Operator.Value.toString() )
##TODO: This should be changed to using a fact structure		
		#set ( $courseList = $proposition.LeftHandSide.Criteria )   		
   		#if ($proposition.LeftHandSide.CompAssistant.YieldValueFunction.toString() == "INTERSECTION" )

		SubsetProposition proposition${key} = new SubsetProposition("$key", ComparisonOperator.${operator}, "$rhs", new HashSet(Arrays.asList("$courseList".split("\\s*,\\s*"))),  req.getLuiIds() ); 
		proposition${key}.apply();
		##prop.setProposition("$key",proposition${key});		
        prop.addProposition(proposition${key});      
		#set ($count = $count + 1)														
   		#end
   		#if ($proposition.LeftHandSide.CompAssistant.YieldValueFunction.toString() == "SUM" )

		SumProposition proposition${key} = new SumProposition("$key", ComparisonOperator.${operator}, "$rhs", req.computeLearningResults(Arrays.asList("$courseList".split("\\s*,\\s*"))) ); 
		proposition${key}.apply();
		##prop.setProposition("$key",proposition${key});		
        prop.addProposition(proposition${key});      
		#set ($count = $count + 1)														
   		#end
   		#end
    	
    	update(prop);
	end
	
##rule "${ruleName} EVAL"
rule "${ruleName}"
	##salience -100
	when
		prop : PropositionContainer(size == $count)
##   		eval (
##   			#foreach($symbol in $functionSymbols) 
##            #if ($symbol == "+" ) 
##                ||
##            #elseif ($symbol == "*")
##                &&
##            #elseif ($symbol == "(") 
##                (
##            #elseif ($symbol == ")") 
##                )
##            #else 
##                prop.getProposition("$symbol").getResult()   			
##   			#end
##   			#end   		   		
##		)

    #foreach($symbol in $functionSymbols) 
        #if ($symbol == "+" ) or
        #elseif ($symbol == "*") and
        #elseif ($symbol == "(") (
        #elseif ($symbol == ")") )
        #else Proposition( propositionName == "$symbol" && result == true ) from prop.propositions
             
        #end
    #end                
	then
   		prop.setRuleResult(true);
	end	
	
	
		