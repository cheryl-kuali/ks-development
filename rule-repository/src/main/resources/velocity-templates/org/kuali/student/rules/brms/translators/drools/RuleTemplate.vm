##
## Copyright 2007 The Kuali Foundation
##
## Licensed under the Educational Community License, Version 1.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.opensource.org/licenses/ecl1.php
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## A generic rule template

rule "${ruleName}_INIT"
## Set salience to max Integer value (java.lang.Integer.MAX)
    salience 2147483647	
    no-loop true
    lock-on-active true
    when 
        cont : FactContainer( id == "${ruleName}", prop : propositionContainer, req : request )
    then
    	#set ($count = 0)
    	#foreach( $key in $propositionMap.keySet() ) 
   		#set ( $proposition = $propositionMap.get($key) )
   		#set ( $rhs = $proposition.RightHandSide.ExpectedValue )
##TODO: This should be changed to directly call the comparison operator inside the rule proposition    		   		
   		#set ( $operator = $proposition.Operator.Value.toString() )
##TODO: This should be changed to using a fact structure		
		#set ( $courseList = $proposition.LeftHandSide.Criteria )   		
   		#if ($proposition.LeftHandSide.CompAssistant.YieldValueFunction.toString() == "INTERSECTION" )

		SubsetProposition proposition${key} = new SubsetProposition("$key", ComparisonOperator.${operator}, "$rhs", new HashSet(Arrays.asList("$courseList".split("\\s*,\\s*"))),  req.getLuiIds() ); 
		proposition${key}.apply();
        prop.addProposition(proposition${key});      
		#set ($count = $count + 1)														
   		#end
   		#if ($proposition.LeftHandSide.CompAssistant.YieldValueFunction.toString() == "SUM" )

		SumProposition proposition${key} = new SumProposition("$key", ComparisonOperator.${operator}, "$rhs", req.compute(Arrays.asList("$courseList".split("\\s*,\\s*"))) ); 
		proposition${key}.apply();
        prop.addProposition(proposition${key});      
		#set ($count = $count + 1)														
   		#end
   		#end
    	
    	##update(prop);
        update(cont);
	end
	
rule "${ruleName}"
	when
        FactContainer( id == "${ruleName}", prop : propositionContainer)
##   		eval (
##   			#foreach($symbol in $functionSymbols) 
##            #if ($symbol == "+" ) 
##                ||
##            #elseif ($symbol == "*")
##                &&
##            #elseif ($symbol == "(") 
##                (
##            #elseif ($symbol == ")") 
##                )
##            #else 
##                prop.getProposition("$symbol").getResult()   			
##   			#end
##   			#end   		   		
##		)

    #foreach($symbol in $functionSymbols) 
        #if ($symbol == "+" ) or
        #elseif ($symbol == "*") and
        #elseif ($symbol == "(") (
        #elseif ($symbol == ")") )
        #else Proposition( propositionName == "$symbol" && result == true ) from prop.propositions
        #end
    #end                
	then
   		prop.setRuleResult(true);
	end		