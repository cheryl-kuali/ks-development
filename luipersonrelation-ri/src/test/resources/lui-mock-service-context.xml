<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd ">


	<bean id="personClient"
		class="org.kuali.student.poc.common.test.mock.MockProxyFactoryBean">
		<property name="interfaceClass"
			value="org.kuali.student.poc.wsdl.personidentity.person.PersonService" />
		<property name="methodReturnMap">
			<map>
				<entry>
					<key>
						<value>fetchPersonDisplay</value>
					</key>
					<ref bean="fetchPersonDisplayReturn" />
				</entry>
				<entry>
					<key>
						<value>findPeopleDisplayByPersonIds</value>
					</key>
					<ref bean="fetchValidPeopleList" />
				</entry>
			</map>
		</property>
	</bean>


	<bean id="luClient"
		class="org.kuali.student.poc.common.test.mock.MockProxyFactoryBean">
		<property name="interfaceClass"
			value="org.kuali.student.poc.wsdl.learningunit.lu.LuService" />
		<property name="methodReturnMap">
			<map>
				<entry>
					<key>
						<value>fetchLui</value>
					</key>
					<ref bean="lui1" />
				</entry>
				<entry>
					<key>
						<value>fetchLuiDisplay</value>
					</key>
					<ref bean="fetchLuiDisplayReturn" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="lui1"
		class="org.kuali.student.poc.xsd.learningunit.lu.dto.LuiInfo">
		<property name="luiId" value="Lui 1" />
		<property name="cluDisplay" ref="clu" />
		<property name="maxSeats" value="3" />
	</bean>

	<bean id="clu"
		class="org.kuali.student.poc.xsd.learningunit.lu.dto.CluDisplay">
		<property name="cluId" value="Clu 1" />
		<property name="cluShortName" value="MATH220" />
	</bean>

	<bean id="fetchPersonDisplayReturn"
		class="org.kuali.student.poc.common.test.mock.MockArgumentMapper">
		<property name="argumentMapper">
			<map>
				<entry>
					<key>
						<value>Person 1</value>
					</key>
					<ref bean="personDisplay1" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="fetchValidPeopleList" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<ref bean="personDisplay1" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="personDisplay1"
		class="org.kuali.student.poc.xsd.personidentity.person.dto.PersonDisplay">
		<property name="name" ref="personNameInfo1" />
		<property name="personId" value="Person 3" />
	</bean>


	<bean id="personNameInfo1"
		class="org.kuali.student.poc.xsd.personidentity.person.dto.PersonNameInfo">
		<property name="personId" value="Person 3" />
		<property name="givenName" value="Turf" />
		<property name="surname" value="Astro" />
	</bean>


	<bean id="fetchLuiDisplayReturn"
		class="org.kuali.student.poc.common.test.mock.MockArgumentMapper">
		<property name="argumentMapper">
			<map>
				<entry>
					<key>
						<value>Lui 1</value>
					</key>
					<ref bean="luiDisplay1" />
				</entry>
				<entry>
					<key>
						<value>Lui 2</value>
					</key>
					<ref bean="luiDisplay2" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="luiDisplay1"
		class="org.kuali.student.poc.xsd.learningunit.lu.dto.LuiDisplay">
		<property name="luiId" value="Lui 1" />
	</bean>

	<bean id="luiDisplay2"
		class="org.kuali.student.poc.xsd.learningunit.lu.dto.LuiDisplay">
		<property name="luiId" value="Lui 2" />
	</bean>
	
    <bean id="mapExceptionAdvisor"
        class="org.kuali.student.poc.common.util.ExceptionMappingAdvice">
        <property name="defaultException" value="org.kuali.student.poc.common.ws.exceptions.OperationFailedException"/>
        <property name="exceptionMapping">
            <map>
                <entry key="javax.persistence.EntityExistsException"
                    value="org.kuali.student.poc.common.ws.exceptions.AlreadyExistsException" />
            </map>
        </property>
    </bean>
    <aop:config>
        <aop:aspect id="dataAccessToBusinessException"
            ref="mapExceptionAdvisor">

            <aop:after-throwing
                pointcut="execution(* org.kuali.student.poc.learningunit.luipersonrelation.service..*.*(..))"
                method="afterThrowing" throwing="ex" />
        </aop:aspect>
   </aop:config>
    
<!--  ********************************************************************** -->
	<!--  Rule Engine Beans -->

	<bean id="businessRuleDAO"
		class="org.kuali.student.rules.brms.core.dao.impl.FunctionalBusinessRuleDAOImpl">
	</bean>

	<bean id="droolsRepository"
		class="org.kuali.student.rules.brms.repository.drools.RuleEngineRepositoryDroolsImpl">
		<constructor-arg type="org.drools.repository.RulesRepository"
			ref="rulesRepository" />
	</bean>

	<bean id="defaultDroolsRepositoryContainer"
		class="org.kuali.student.rules.brms.repository.drools.DefaultDroolsRepository"
		destroy-method="shutdown">
		<constructor-arg type="java.lang.String"
			value="/drools-repository" />
	</bean>

	<bean id="rulesRepository"
		factory-bean="defaultDroolsRepositoryContainer"
		factory-method="getRepository" />

</beans>