<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.kuali.student.authz</groupId>
	<artifactId>AuthZ</artifactId>
	<packaging>jar</packaging>
	<name>AuthZ</name>
	<version>0.0.1-SNAPSHOT</version>
	<description />
	<parent>
		<groupId>org.kuali.student.poc.common</groupId>
		<artifactId>ks-service-pom</artifactId>
		<version>0.0.3-SNAPSHOT</version>
	</parent>
	<repositories>

		<!-- Repository for poc lu service -->
		<repository>
			<id>kuali.snapshot</id>
			<url>http://kuali.umd.edu/archiva/repository/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>

	</repositories>

	<properties>
		<ks.service.package>org.kuali.student.authz.service</ks.service.package>
		<ks.service.className>
			AuthorizationService
		</ks.service.className>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.kuali.student.poc.common</groupId>
			<artifactId>common-test</artifactId>
			<version>0.0.3-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.3.2.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>2.5.4</version>
		</dependency>

	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<!-- Exclude some tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/TestCollegesData.java</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- Use this profile to Create & Load QualfierType & Qualifier tables during the clean step-->
		<profile>
			<id>setup</id>
			<build>
				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<version>1.1</version>

						<!--jar file that has the jdbc driver -->
						<dependencies>
							<dependency>
								<groupId>org.apache.derby</groupId>
								<artifactId>derby</artifactId>
								<version>${derby.version}</version>
							</dependency>
						</dependencies>

						<configuration>
							<driver>
								org.apache.derby.jdbc.EmbeddedDriver
							</driver>
							<url>
								jdbc:derby:${project.build.directory}/serviceTestDB;create=true;shutdown=false;
							</url>
							<username>serviceTest</username>
							<password>kuali</password>
						</configuration>
						<executions>
							<execution>
								<phase>clean</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<srcFiles>
										<srcFile>src/main/config/authz-createTables-bootstrap.sql</srcFile>
										<srcFile>src/main/config/authz-bootstrap.sql</srcFile>
                                         <!-- 
                                        <srcFile>src/main/config/authz-bootstrap2.sql</srcFile>
                                        <srcFile>src/main/config/authz-principal-bootstrap.sql</srcFile>
                                        <srcFile>src/main/config/authz-authorizations-bootstrap.sql</srcFile>
                                        -->
                                        <srcFile>src/main/config/authz-bootstrap3.sql</srcFile>
									</srcFiles>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Use this profile to generate jaxws artifacts -->
		<profile>
			<id>java2ws</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.cxf</groupId>
						<artifactId>cxf-java2ws-plugin</artifactId>
						<version>${cxf.version}</version>
						<dependencies>
							<dependency>
								<groupId>org.apache.cxf</groupId>
								<artifactId>cxf-rt-frontend-jaxws</artifactId>
								<version>${cxf.version}</version>
							</dependency>
							<dependency>
								<groupId>org.apache.cxf</groupId>
								<artifactId>cxf-rt-frontend-simple</artifactId>
								<version>${cxf.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>generate-wsdl</id>
								<phase>process-classes</phase>
								<configuration>
									<className>
										${ks.service.package}.${ks.service.className}
									</className>
									<serviceName>${ks.service.className}</serviceName>
									<genWsdl>true</genWsdl>
									<genWrapperbean>true</genWrapperbean>
									<verbose>true</verbose>
		                  			<argline>
		                  				-s ${project.build.directory}/generated/src -classdir ${project.build.outputDirectory}
		                  			</argline>							
								</configuration>
								<goals>
									<goal>java2ws</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>