##
## Copyright 2007 The Kuali Foundation
##
## Licensed under the Educational Community License, Version 1.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.opensource.org/licenses/ecl1.php
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## A generic initialization rule template

rule "${ruleName}"
    no-loop true
    lock-on-active true
    when 
        cont : FactContainer( id == "${anchor}", state == FactContainer.State.INIT, prop : propositionContainer, req : request )
    then
    	prop.setFunctionalRuleString("$functionString");
    	#set ($count = 0)
    	#foreach( $key in $propositionMap.keySet() ) 
   		#set ( $proposition = $propositionMap.get($key) )
   		## Set rhs = rulePropositionDTO.getRightHandSide().getExpectedValue()
   		#set ( $rhs = $proposition.RightHandSide.ExpectedValue )
   		## Set rulePropositionDTO.getComparisonOperatorType()
   		#set ( $operator = $proposition.ComparisonOperatorType )

##TODO: This should be changed to using a fact structure
		#set( $yvf = $proposition.LeftHandSide.YieldValueFunction )

		##set ( $courseList = $proposition.LeftHandSide.YieldValueFunction )   		
   		#if ($proposition.LeftHandSide.YieldValueFunction.YieldValueFunctionType == "INTERSECTION" )
        #set( $criteria = $translatorUtil.getDefinitionVariableValue( $yvf, "kuali.student.criteria.intersection.id", "kuali.student.criteria.key" ) )

		SubsetProposition proposition${key} = new SubsetProposition("$key", ComparisonOperator.${operator}, "$rhs", new HashSet(Arrays.asList("$criteria".split("\\s*,\\s*"))), req.getLuiIds() ); 
		proposition${key}.apply();
        prop.addProposition(proposition${key});      
		#set ($count = $count + 1)														
   		#end
   		#if ($proposition.LeftHandSide.YieldValueFunction.YieldValueFunctionType == "SUM" )
        #set( $criteria = $translatorUtil.getDefinitionVariableValue( $yvf, "kuali.student.criteria.summation.id", "kuali.student.criteria.key" ) )

		SumProposition proposition${key} = new SumProposition("$key", ComparisonOperator.${operator}, "$rhs", req.compute(Arrays.asList("$criteria".split("\\s*,\\s*"))) ); 
		proposition${key}.apply();
        prop.addProposition(proposition${key});      
		#set ($count = $count + 1)														
   		#end
   		#end
    	
        cont.setState(FactContainer.State.DONE);
        
        update(cont);
	end
