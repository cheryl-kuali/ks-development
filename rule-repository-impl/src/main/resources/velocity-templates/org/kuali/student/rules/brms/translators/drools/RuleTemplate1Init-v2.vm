##
## Copyright 2007 The Kuali Foundation
##
## Licensed under the Educational Community License, Version 1.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.opensource.org/licenses/ecl1.php
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

## A generic initialization rule template
## Generics need Java 1.5 or greater - Must set drools.dialect.java.compiler=ECLIPSE

rule "${ruleName}"
    no-loop true
    lock-on-active true

    when 
        container : FactContainer( id == "${anchor}", state == FactContainer.State.INIT, prop : propositionContainer, factMap : factMap )
        //Only run rule when: currentDate >= effectiveStartTime AND currentDate < effectiveEndTime
        CurrentDateTime( currentDateAsLong >= $effectiveStartTime && currentDateAsLong < $effectiveEndTime )
    then
        Logger logger = LoggerFactory.getLogger(org.kuali.student.rules.translators.RuleSetTranslator.class);

        if (logger.isDebugEnabled()) {
            logger.debug("factMap="+factMap);
        }

        prop.setFunctionalRuleString("$functionString");
        #foreach( $key in $propositionMap.keySet() ) 
       		#set( $proposition = $propositionMap.get($key) )
       		#set( $rhs = $proposition.RightHandSide.ExpectedValue )
            #set( $comparisonDataType = $proposition.ComparisonDataType )
       		#set( $operator = $proposition.ComparisonOperatorType )
    		#set( $yvf = $proposition.LeftHandSide.YieldValueFunction )

            #if ( $yvf.YieldValueFunctionType == "SUBSET" )
                #set( $criteriaKey = $factUtil.getFactParamDefinitionKey( $yvf ) )
                #set( $factKey = $factUtil.getFactParamExecutionKey( $yvf ) )

                String uuid${key} = "${key}-${uuid}";
                YVFSubsetProposition proposition${key} = new YVFSubsetProposition(uuid${key}, 
                    factMap.get( "$criteriaKey" ), factMap.get( "$factKey" ) );
                proposition${key}.apply();
                prop.addProposition(proposition${key}.getProposition());
                insert(proposition${key}.getProposition());

       		#elseif ( $yvf.YieldValueFunctionType == "INTERSECTION" )
                #set( $criteriaKey = $factUtil.getFactParamDefinitionKey( $yvf ) )
                #set( $factKey = $factUtil.getFactParamExecutionKey( $yvf ) )

                String uuid${key} = "${key}-${uuid}";
                YVFIntersectionProposition proposition${key} = new YVFIntersectionProposition(uuid${key}, 
                    ComparisonOperator.${operator}, new Integer($rhs), 
                    factMap.get( "$criteriaKey" ), factMap.get( "$factKey" ) );
                proposition${key}.apply();
                prop.addProposition(proposition${key}.getProposition());
                insert(proposition${key}.getProposition());

            #elseif ( $proposition.LeftHandSide.YieldValueFunction.YieldValueFunctionType == "SUM" )
                #set( $factKey = $factUtil.getFactKey( $yvf, $proposition.Name ).get(0) )

                List factList${key} = (List) factMap.get( "$factKey" );
                if (logger.isDebugEnabled()) {
                    logger.debug("factList${key}="+factList${key});
                }
                $comparisonDataType value${key} = new $comparisonDataType("$rhs");
                SumProposition<BigDecimal> proposition${key} = new SumProposition<BigDecimal>("${key}-${anchor}", ComparisonOperator.${operator}, new BigDecimal($rhs), factList${key} ); 
                proposition${key}.apply();
                prop.addProposition(proposition${key});
                insert(proposition${key});

            #elseif ( $proposition.LeftHandSide.YieldValueFunction.YieldValueFunctionType == "AVERAGE" )
                #set( $factKey = $factUtil.getFactKey( $yvf, $proposition.Name ).get(0) )

                List factList${key} = (List) factMap.get( "$factKey" );
                if (logger.isDebugEnabled()) {
                    logger.debug("factList${key}="+factList${key});
                }
                $comparisonDataType value${key} = new $comparisonDataType("$rhs");
                AverageProposition<BigDecimal> proposition${key} = new AverageProposition<BigDecimal>("${key}-${anchor}", ComparisonOperator.${operator}, new BigDecimal($rhs), factList${key} ); 
                proposition${key}.apply();
                prop.addProposition(proposition${key});
                insert(proposition${key});

            #elseif ( $proposition.LeftHandSide.YieldValueFunction.YieldValueFunctionType == "MIN" )
                #set( $factKey = $factUtil.getFactKey( $yvf, $proposition.Name ).get(0) )

                List factList${key} = (List) factMap.get( "$factKey" );
                if (logger.isDebugEnabled()) {
                    logger.debug("factList${key}="+factList${key});
                }
                $comparisonDataType value${key} = new $comparisonDataType("$rhs");
                MinProposition<$comparisonDataType> proposition${key} = new MinProposition<$comparisonDataType>("${key}-${anchor}", ComparisonOperator.${operator}, value${key}, factList${key} ); 
                proposition${key}.apply();
                prop.addProposition(proposition${key});
                insert(proposition${key});

            #elseif ( $proposition.LeftHandSide.YieldValueFunction.YieldValueFunctionType == "MAX" )
                #set( $factKey = $factUtil.getFactKey( $yvf, $proposition.Name ).get(0) )

                List factList${key} = (List) factMap.get( "$factKey" );
                if (logger.isDebugEnabled()) {
                    logger.debug("factList${key}="+factList${key});
                }
                $comparisonDataType value${key} = new $comparisonDataType("$rhs");
                MaxProposition<$comparisonDataType> proposition${key} = new MaxProposition<$comparisonDataType>("${key}-${anchor}", ComparisonOperator.${operator}, value${key}, factList${key} ); 
                proposition${key}.apply();
                prop.addProposition(proposition${key});
                insert(proposition${key});

            #end
        #end

        container.setState(FactContainer.State.DONE);
        update(container);
end