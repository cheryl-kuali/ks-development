#created on: Oct 3, 2008
package org.kuali.student.rules.test

import java.util.*;
import java.math.BigDecimal;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.kuali.student.rules.internal.common.entity.*;
import org.kuali.student.rules.internal.common.statement.propositions.*;
import org.kuali.student.rules.rulemanagement.dto.*;
import org.kuali.student.rules.util.FactContainer;
import org.kuali.student.rules.util.FactContainer.State;
import org.kuali.student.rules.util.CurrentDateTime;
import org.kuali.student.rules.internal.common.utils.BusinessRuleUtil;


rule "TestRuleName_INIT"
    no-loop true
    lock-on-active true

    when 
        container : FactContainer( id == "TestRuleName", state == FactContainer.State.INIT, prop : propositionContainer, factMap : factMap )
        //Only run rule when: currentDate >= effectiveStartTime AND currentDate < effectiveEndTime
        //CurrentDateTime( currentDateAsLong >= 20000101120041 && currentDateAsLong < 21000101120041 )
    then
        Logger logger = LoggerFactory.getLogger(org.kuali.student.rules.translators.RuleSetTranslator.class);

        prop.setFunctionalRuleString("(P1+P2)*(P3+P4)");
        
            
            // criteria = CHEM999
            // factKey  = fact1

            
                Set criteriaSetP4 = new HashSet(Arrays.asList("CHEM999".split("\\s*,\\s*")));
                Set factSetP4 = (Set) factMap.get( "fact1" );
                if (logger.isDebugEnabled()) {
                    logger.debug("criteriaSetP4="+criteriaSetP4);
                    logger.debug("factSetP4="+factSetP4);
                }
                IntersectionProposition<java.lang.String> propositionP4 = new IntersectionProposition<java.lang.String>("P4", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP4, factSetP4 ); 
                //IntersectionProposition propositionP4 = new IntersectionProposition ("P4", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP4, factSetP4 ); 
                propositionP4.apply();
                prop.addProposition(propositionP4);
insert(propositionP4);

                    
            
            // criteria = CPR101
            // factKey  = fact1

            
                Set criteriaSetP1 = new HashSet(Arrays.asList("CPR101".split("\\s*,\\s*")));
                Set factSetP1 = (Set) factMap.get( "fact1" );
                if (logger.isDebugEnabled()) {
                    logger.debug("criteriaSetP1="+criteriaSetP1);
                    logger.debug("factSetP1="+factSetP1);
                }
                IntersectionProposition<java.lang.String> propositionP1 = new IntersectionProposition<java.lang.String>("P1", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP1, factSetP1 ); 
                //IntersectionProposition propositionP1 = new IntersectionProposition ("P1", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP1, factSetP1 ); 
                propositionP1.apply();
                prop.addProposition(propositionP1);
insert(propositionP1);

                    
            
            // criteria = CHEM101
            // factKey  = fact1

            
                Set criteriaSetP3 = new HashSet(Arrays.asList("CHEM101".split("\\s*,\\s*")));
                Set factSetP3 = (Set) factMap.get( "fact1" );
                if (logger.isDebugEnabled()) {
                    logger.debug("criteriaSetP3="+criteriaSetP3);
                    logger.debug("factSetP3="+factSetP3);
                }
                IntersectionProposition<java.lang.String> propositionP3 = new IntersectionProposition<java.lang.String>("P3", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP3, factSetP3 ); 
                //IntersectionProposition propositionP3 = new IntersectionProposition ("P3", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP3, factSetP3 ); 
                propositionP3.apply();
                prop.addProposition(propositionP3);
insert(propositionP3);

                    
            
            // criteria = MATH102
            // factKey  = fact1

            
                Set criteriaSetP2 = new HashSet(Arrays.asList("MATH102".split("\\s*,\\s*")));
                Set factSetP2 = (Set) factMap.get( "fact1" );
                if (logger.isDebugEnabled()) {
                    logger.debug("criteriaSetP2="+criteriaSetP2);
                    logger.debug("factSetP2="+factSetP2);
                }
                IntersectionProposition<java.lang.String> propositionP2 = new IntersectionProposition<java.lang.String>("P2", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP2, factSetP2 ); 
                //IntersectionProposition propositionP2 = new IntersectionProposition ("P2", ComparisonOperator.EQUAL_TO, new Integer(1), criteriaSetP2, factSetP2 ); 
                propositionP2.apply();
                prop.addProposition(propositionP2);
insert(propositionP2);
                    
        container.setState(FactContainer.State.DONE);
        update(container);
end


rule "TestRuleName"
    when
        factContainer : FactContainer( id == "TestRuleName", state == FactContainer.State.DONE, prop : propositionContainer)

        P1 : Proposition( propositionName == "P1" )
        P2 : Proposition( propositionName == "P2" )
        P3 : Proposition( propositionName == "P3" )
        P4 : Proposition( propositionName == "P4" )

        exists
        ( 
            ( Proposition( propositionName == "P1" && result == true ) 
            || 
            Proposition( propositionName == "P2" && result == true ) )
            && 
            ( Proposition( propositionName == "P3" && result == true ) 
            || 
            Proposition( propositionName == "P4" && result == true ) ) 
        )
    then
        prop.setRuleResult(true);
        retract(factContainer);
        retract(P1);
        retract(P2);
        retract(P3);
        retract(P4);
end
     
